<?php

namespace Drmovi\PackageGenerator\Actions;

use Drmovi\PackageGenerator\Entities\ComposerFile;
use Drmovi\PackageGenerator\Enums\OperationTypes;
use Drmovi\PackageGenerator\Utils\FileUtil;

class CreatePackageAction extends PackageAction
{


    protected OperationTypes $operationType = OperationTypes::PACKAGE_CREATION;

    public function exec(): void
    {
        $this->createMainPackage();
        $this->addPackageSharedFolderToSharedPackage();
        $this->addTestDirectoriesToPhpUnitXml();
        $this->createK8sFiles();
    }


    private function copyStubFiles(string $source, string $destination, string $composerName, string $packageNamespace, string $packageName): void
    {
        FileUtil::copyDirectory(
            source: __DIR__ . '/../../stubs/' . $source,
            destination: $destination,
            replacements: [
                '{{PROJECT_COMPOSER_NAME}}' => $composerName,
                '{{PROJECT_VERSION}}' => '1.0.0',
                '{{PROJECT_DESCRIPTION}}' => 'This is a package generated by drmovi PHP Package Generator',
                '{{PROJECT_COMPOSER_NAMESPACE}}' => str_replace('\\', '\\\\', $packageNamespace),
                '{{PROJECT_NAMESPACE}}' => $packageNamespace,
                '{{PROJECT_CLASS_NAME}}' => ucwords($packageName),
                '{{PROJECT_FILE_NAME}}' => strtolower($packageName),
            ]);
    }


    private function createPackage(
        string   $destination,
        string   $composerName,
        string   $packageNamespace,
        string   $packageName,
        string   $packageRelativePath,
        callable $beforeComposerCommand = null
    ): void
    {
        $this->copyStubFiles(
            source: 'frameworks/' . $this->configs->getFramework() . '/package',
            destination: $destination,
            composerName: $composerName,
            packageNamespace: $packageNamespace,
            packageName: $packageName
        );
        if (is_callable($beforeComposerCommand)) {
            call_user_func($beforeComposerCommand, ...func_get_args());
        }
        $this->composer->runComposerCommand([
            'config',
            "repositories.{$packageName}",
            json_encode(['type' => 'path', 'url' => './' . $packageRelativePath]),
            '--no-interaction'
        ]);
        $this->composer->runComposerCommand([
            'require',
            $composerName,
        ]);
    }

    private function createMainPackage(): void
    {
        $this->createPackage(
            destination: $this->packageAbsolutePath,
            composerName: $this->packageComposerName,
            packageNamespace: $this->packageNamespace,
            packageName: $this->packageName,
            packageRelativePath: $this->packageRelativePath
        );
    }

    private function createSharedPackage(): void
    {
        if (FileUtil::directoryExist($this->sharedPackageAbsolutePath)) {
            return;
        }
        $this->createPackage(
            destination: $this->sharedPackageAbsolutePath,
            composerName: $this->sharedPackageComposerName,
            packageNamespace: $this->sharedPackageNamespace,
            packageName: $this->sharedPackageName,
            packageRelativePath: $this->sharedPackageRelativePath,
            beforeComposerCommand: [$this, 'addServicePsr4NamespaceToSharedPackageComposerFile']
        );
        $this->copyStubFiles(
            source: 'frameworks/' . $this->configs->getFramework() . '/shared/app',
            destination: $this->sharedPackageAbsolutePath . '/app',
            composerName: $this->sharedPackageComposerName,
            packageNamespace: $this->getPackageNamespace($this->sharedPackageComposerName),
            packageName: $this->sharedPackageName
        );
        $this->copyStubFiles(
            source: 'frameworks/' . $this->configs->getFramework() . '/shared/routes',
            destination: $this->sharedPackageAbsolutePath . '/routes',
            composerName: $this->sharedPackageComposerName,
            packageNamespace: $this->getPackageNamespace($this->sharedPackageComposerName),
            packageName: $this->sharedPackageName
        );
    }

    private function addPackageSharedFolderToSharedPackage()
    {
        $this->copyStubFiles(
            'frameworks/' . $this->configs->getFramework() . '/shared/services',
            destination: $this->sharedPackageAbsolutePath . '/services',
            composerName: $this->packageComposerName,
            packageNamespace: $this->sharedPackageNamespace,
            packageName: $this->packageName
        );
    }

    private function addServicePsr4NamespaceToSharedPackageComposerFile(
        string $destination,
        string $composerName,
        string $packageNamespace,
        string $packageName,
        string $packageRelativePath,
    )
    {
        $file = new ComposerFile($destination);
        $file->addPsr4Namespace($packageNamespace . '\\Services\\', 'services/');
    }

    private function addTestDirectoriesToPhpUnitXml(): void
    {
        $this->rootPhpunitXmlFile->addTestDirectories($this->packageRelativePath);
    }

    private function createK8sFiles(): void
    {
        if ($this->configs->getMode() !== 'microservice') {
            return;
        }
        $this->copyStubFiles(
            source: 'devops/package/k8s',
            destination: $this->packageAbsolutePath . '/k8s',
            composerName: $this->packageComposerName,
            packageNamespace: $this->packageNamespace,
            packageName: $this->packageName
        );
        $this->addPackageSkaffoldFileToRootSkaffold();
    }

    private function addPackageSkaffoldFileToRootSkaffold(): void
    {
        $this->rootSkaffoldYamlFile->addRequire($this->packageSkaffoldYamlFileRelativePath);
    }

    public function init(): void
    {
        $this->createSharedPackage();
        $this->createRootK8sFiles();
    }

    private function createRootK8sFiles(): void
    {
        if ($this->configs->getMode() !== 'microservice') {
            return;
        }
        FileUtil::copyDirectory(
            source: __DIR__ . '/../../stubs/devops/root',
            destination: getcwd()
        );
    }
}
